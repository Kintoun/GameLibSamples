Code designs:

Game loop management:
-Create states which are pushed and popped.
	-https://github.com/FRex/Man
	-For example the main menu is just a state that is pushed initially, then depending on button presses new states are pushed on top of those.
	-Each state is like a game loop of it's own with keys and window.
	-There is a state manager which calls run on the states.
	-Pausing is just another state that is pushed on top of the game itself
-Split window poll events and game engine events up.
	-https://github.com/FRex/Man
	-while(window->pollEvent) then while(engine.pollEvent)
	
Decoupling:
http://www.gamedev.net/page/resources/_/technical/game-programming/managing-decoupling-r3034
-Avoid frameworks, they create coupling.
-Let the high level systems communicate instead of low level systems. Creates coupling in one place.
-Use IDs and look them up. Lets you pass around objects all over the place easily.
-Don't stress out too much about type casting. 99% of the time it will crash and be fixed.

Component models:
-the power of a component system comes from how you integrate it with script and data

Interpolation with speed/movement:
-If I am updating 25 times per sec, yet I am rendering at 50 FPS, then I can update 25 times, and draw twice between updates.
-The update code sets the game tick position of the player. The render code sets the position of the sprite that represents the player.
-In the case with 2 render calls per game update (25 ticks per sec, 50 FPS), When the player holds forward, we move forward X units in game logic.
 However in render logic since we know we get 2 render calls, we move the SPRITE forward x/2 units, call render, then x/2 again and call render again (2 renders).
-Collisions, physics, etc work off of the game state pos, NOT the sprite position (render pos). There is no "lag" per-se. In fact we vastly smooth things out.
-Imagine the case where we update 25 times per sec, but render at uncapped, say 1000, FPS. Our animations would be dead smooth, but our game logic wouldn't be
 overburdened since it is only working at the rate of 25 ticksPerSec. The main game loop calculates the interpolation between 2 game ticks, and uses that information
 to smooth out the rendering between game ticks.

Link sprite sheet breakdown:
Idle 90x13
  1 16x22
Walk down
  1 16x22, 122x13
  2 16x23, 149x12
  3 16x24, 174x11
  4 16x22, 197x13
  5 16x23, 223x12
  6 16x24, 249x11
  7 16x22, 272x13
  8 16x22, 298x13

Idle shield
7, 209, 16, 22
Walk up shield
7, 239, 17, 22
32, 237, 17, 24
55, 239, 17, 22
78, 239, 17, 22
101, 238, 17, 23
126, 239, 17, 22
148, 237, 17, 24
172, 240, 17, 22
Walk down shield
7, 209, 16, 22
33, 209, 16, 22
59, 208, 16, 23
82, 207, 16, 24
106, 209, 16, 22
131, 209, 16, 22
154, 208, 16, 23
175, 207, 16, 24
198, 209, 16, 22
Walk left/right shield
225, 209, 19, 23
249, 208, 19, 24
277, 208, 18, 24
301, 209, 19, 23
326, 209, 19, 23
351, 208, 19, 24
376, 208, 19, 24
402, 208, 18, 24
425, 209, 19, 23
Attack left/right
519, 192, 16, 23
546, 191, 23, 24
574, 194, 29, 21
611, 194, 31, 21
652, 193, 28, 28
681, 193, 23, 31
Attack up
517, 243, 22, 22
546, 235, 22, 30
582, 230, 20, 36
611, 235, 24, 30
643, 242, 32, 23
Attack down
510, 282, 20, 23
542, 283, 22, 24
571, 282, 20, 31
598, 283, 20, 31
624, 284, 28, 29
661, 284, 32, 27


Animation system and Textures
-Animation system has Update and Render functions
-TextureData is simple POD struct
-TextureData is vectors of loaded data. Animation system shouldn't need to know how many frames there are for each "strip".
-Something needs to sit between the Animation system and the raw data. Animation system should just say "AdvanceFrame" and this other system knows the size of the current
 tex strip, modulos if needed.

For my player character I should have 1 sprite and 1 texture. A SpriteSheet should contain a pointer to the sprite and a pointer to the texture and a list of rects. The rects
make up each animation frame.
Ideally I want a boost circular array which I can simply say textureData->IncrementWalking().
This function would simply advance the circular array pointer to the next element.
That element

On a new change of direction I would call TextureStrip.Reset() which sets the circular array back to 0.
This would change the 1 sprite by calling setTexRect
If I know I'm not changing direction I would call AdvanceFrame which simply increments the circular array and changes the sprite accordingly

Animation system keyboard direction input vs unit state:
Animation should just need to know the animation type. WALK UP, WALK DOWN, WALK LEFT, WALK RIGHT, IDLE, ATTACK UP, ATTACK DOWN, ATTACK LEFT, ATTACK RIGHT Or maybe I just pass
the facing and type. i.e. LEFT, ATTACK
Or animation system can track my facing?

Animations should be the result of this Units data. NOT keyboard data. For example if I want "mind" effect on a char then how would I animate that without keyboard input? So my
UnitEntity would have facing, attacking, etc flags. Animation system would take in that state and determine what needs to be animated.
What if I am attacking and moving at the same time? Pass the entire state into the animation system, let it figure out priorities. Link can attack while moving.

This might also solve my "last facing" problem. The animation system can cache that to detemrine animation priorities for movement.

Keep in mind my UnitEntity should have as little data of it's own as possible. It needs to simply be a conglomerate of other systems and data. For that matter I need to create PlayerEntity.

Getting rid of Constants.h and multiple Direction types:
I am using too many "direction" types. I have keyboard input which needs to track keyboard combinations. Then that needs to be distilled into a facing which MUST select a single direction
for the purposes of animation.

When animating, Update has facing and event. Change of event or facing will reset animation count and AnimationStrip. 